{"version":3,"file":"index.js","sources":["../../src/react.ts"],"sourcesContent":["// import { useDebugValue } from 'react'\n// import { useSyncExternalStoreWithSelector } from 'use-sync-external-store/shim/with-selector'\n// Those don't work in ESM, because React libs are CJS only.\n// See: https://github.com/pmndrs/valtio/issues/452\n// The following is a workaround until ESM is supported.\n// eslint-disable-next-line import/extensions\nimport ReactExports from 'react'\n// eslint-disable-next-line import/extensions\nimport useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector'\nimport { createStore } from './vanilla.ts'\nimport type {\n  Mutate,\n  StateCreator,\n  StoreApi,\n  StoreMutatorIdentifier,\n} from './vanilla.ts'\n\nconst { useDebugValue } = ReactExports\nconst { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports\n\ntype ExtractState<S> = S extends { getState: () => infer T } ? T : never\n\ntype ReadonlyStoreApi<T> = Pick<StoreApi<T>, 'getState' | 'subscribe'>\n\ntype WithReact<S extends ReadonlyStoreApi<unknown>> = S & {\n  /** @deprecated please use api.getInitialState() */\n  getServerState?: () => ExtractState<S>\n}\n\nlet didWarnAboutEqualityFn = false\n\nconst identity = <T>(arg: T): T => arg\n\nexport function useStore<S extends WithReact<StoreApi<unknown>>>(\n  api: S,\n): ExtractState<S>\n\nexport function useStore<S extends WithReact<StoreApi<unknown>>, U>(\n  api: S,\n  selector: (state: ExtractState<S>) => U,\n): U\n\n/**\n * @deprecated Use `useStoreWithEqualityFn` from 'zustand/traditional'\n * https://github.com/pmndrs/zustand/discussions/1937\n */\nexport function useStore<S extends WithReact<StoreApi<unknown>>, U>(\n  api: S,\n  selector: (state: ExtractState<S>) => U,\n  equalityFn: ((a: U, b: U) => boolean) | undefined,\n): U\n\nexport function useStore<TState, StateSlice>(\n  api: WithReact<StoreApi<TState>>,\n  selector: (state: TState) => StateSlice = identity as any,\n  equalityFn?: (a: StateSlice, b: StateSlice) => boolean,\n) {\n  if (\n    import.meta.env?.MODE !== 'production' &&\n    equalityFn &&\n    !didWarnAboutEqualityFn\n  ) {\n    console.warn(\n      \"[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937\",\n    )\n    didWarnAboutEqualityFn = true\n  }\n  const slice = useSyncExternalStoreWithSelector(\n    api.subscribe,\n    api.getState,\n    api.getServerState || api.getInitialState,\n    selector,\n    equalityFn,\n  )\n  useDebugValue(slice)\n  return slice\n}\n\nexport type UseBoundStore<S extends WithReact<ReadonlyStoreApi<unknown>>> = {\n  (): ExtractState<S>\n  <U>(selector: (state: ExtractState<S>) => U): U\n  /**\n   * @deprecated Use `createWithEqualityFn` from 'zustand/traditional'\n   */\n  <U>(\n    selector: (state: ExtractState<S>) => U,\n    equalityFn: (a: U, b: U) => boolean,\n  ): U\n} & S\n\ntype Create = {\n  <T, Mos extends [StoreMutatorIdentifier, unknown][] = []>(\n    initializer: StateCreator<T, [], Mos>,\n  ): UseBoundStore<Mutate<StoreApi<T>, Mos>>\n  <T>(): <Mos extends [StoreMutatorIdentifier, unknown][] = []>(\n    initializer: StateCreator<T, [], Mos>,\n  ) => UseBoundStore<Mutate<StoreApi<T>, Mos>>\n  /**\n   * @deprecated Use `useStore` hook to bind store\n   */\n  <S extends StoreApi<unknown>>(store: S): UseBoundStore<S>\n}\n\nconst createImpl = <T>(createState: StateCreator<T, [], []>) => {\n  if (\n    import.meta.env?.MODE !== 'production' &&\n    typeof createState !== 'function'\n  ) {\n    console.warn(\n      \"[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.\",\n    )\n  }\n  const api =\n    typeof createState === 'function' ? createStore(createState) : createState\n\n  const useBoundStore: any = (selector?: any, equalityFn?: any) =>\n    useStore(api, selector, equalityFn)\n\n  Object.assign(useBoundStore, api)\n\n  return useBoundStore\n}\n\nexport const create = (<T>(createState: StateCreator<T, [], []> | undefined) =>\n  createState ? createImpl(createState) : createImpl) as Create\n\n/**\n * @deprecated Use `import { create } from 'zustand'`\n */\nexport default ((createState: any) => {\n  if (import.meta.env?.MODE !== 'production') {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.\",\n    )\n  }\n  return create(createState)\n}) as Create\n"],"names":[],"mappings":";;;;;AAiBA,MAAM,EAAE,eAAkB,GAAA,YAAA,CAAA;AAC1B,MAAM,EAAE,kCAAqC,GAAA,2BAAA,CAAA;AAW7C,IAAI,sBAAyB,GAAA,KAAA,CAAA;AAE7B,MAAM,QAAA,GAAW,CAAI,GAAc,KAAA,GAAA,CAAA;AAqB5B,SAAS,QACd,CAAA,GAAA,EACA,QAA0C,GAAA,QAAA,EAC1C,UACA,EAAA;AACA,EAAA,IACE,QAAA,GAAA,CAAA,QAAA,KAA0B,YAC1B,IAAA,UAAA,IACA,CAAC,sBACD,EAAA;AACA,IAAQ,OAAA,CAAA,IAAA;AAAA,MACN,wNAAA;AAAA,KACF,CAAA;AACA,IAAyB,sBAAA,GAAA,IAAA,CAAA;AAAA,GAC3B;AACA,EAAA,MAAM,KAAQ,GAAA,gCAAA;AAAA,IACZ,GAAI,CAAA,SAAA;AAAA,IACJ,GAAI,CAAA,QAAA;AAAA,IACJ,GAAA,CAAI,kBAAkB,GAAI,CAAA,eAAA;AAAA,IAC1B,QAAA;AAAA,IACA,UAAA;AAAA,GACF,CAAA;AACA,EAAA,aAAA,CAAc,KAAK,CAAA,CAAA;AACnB,EAAO,OAAA,KAAA,CAAA;AACT,CAAA;AA2BA,MAAM,UAAA,GAAa,CAAI,WAAyC,KAAA;AAC9D,EAAA,IACE,QAAA,GAAA,CAAA,QAAA,KAA0B,YAC1B,IAAA,OAAO,gBAAgB,UACvB,EAAA;AACA,IAAQ,OAAA,CAAA,IAAA;AAAA,MACN,iIAAA;AAAA,KACF,CAAA;AAAA,GACF;AACA,EAAA,MAAM,MACJ,OAAO,WAAA,KAAgB,UAAa,GAAA,WAAA,CAAY,WAAW,CAAI,GAAA,WAAA,CAAA;AAEjE,EAAA,MAAM,gBAAqB,CAAC,QAAA,EAAgB,eAC1C,QAAS,CAAA,GAAA,EAAK,UAAU,UAAU,CAAA,CAAA;AAEpC,EAAO,MAAA,CAAA,MAAA,CAAO,eAAe,GAAG,CAAA,CAAA;AAEhC,EAAO,OAAA,aAAA,CAAA;AACT,CAAA,CAAA;AAEO,MAAM,SAAU,CAAI,WAAA,KACzB,WAAc,GAAA,UAAA,CAAW,WAAW,CAAI,GAAA,WAAA;AAK1C,YAAgB,CAAC,WAAqB,KAAA;AACpC,EAAI,IAAA,OAAA,kBAA0B,YAAc,EAAA;AAC1C,IAAQ,OAAA,CAAA,IAAA;AAAA,MACN,4FAAA;AAAA,KACF,CAAA;AAAA,GACF;AACA,EAAA,OAAO,OAAO,WAAW,CAAA,CAAA;AAC3B,CAAA;;;;"}