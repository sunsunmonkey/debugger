{"version":3,"file":"immer.mjs","sources":["../../../src/middleware/immer.ts"],"sourcesContent":["import { produce } from 'immer'\nimport type { Draft } from 'immer'\nimport type { StateCreator, StoreMutatorIdentifier } from '../vanilla.ts'\n\ntype Immer = <\n  T,\n  Mps extends [StoreMutatorIdentifier, unknown][] = [],\n  Mcs extends [StoreMutatorIdentifier, unknown][] = [],\n>(\n  initializer: StateCreator<T, [...Mps, ['zustand/immer', never]], Mcs>,\n) => StateCreator<T, Mps, [['zustand/immer', never], ...Mcs]>\n\ndeclare module '../vanilla' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface StoreMutators<S, A> {\n    ['zustand/immer']: WithImmer<S>\n  }\n}\n\ntype Write<T, U> = Omit<T, keyof U> & U\ntype SkipTwo<T> = T extends { length: 0 }\n  ? []\n  : T extends { length: 1 }\n    ? []\n    : T extends { length: 0 | 1 }\n      ? []\n      : T extends [unknown, unknown, ...infer A]\n        ? A\n        : T extends [unknown, unknown?, ...infer A]\n          ? A\n          : T extends [unknown?, unknown?, ...infer A]\n            ? A\n            : never\n\ntype WithImmer<S> = Write<S, StoreImmer<S>>\n\ntype StoreImmer<S> = S extends {\n  getState: () => infer T\n  setState: infer SetState\n}\n  ? SetState extends (...a: infer A) => infer Sr\n    ? {\n        setState(\n          nextStateOrUpdater: T | Partial<T> | ((state: Draft<T>) => void),\n          shouldReplace?: boolean | undefined,\n          ...a: SkipTwo<A>\n        ): Sr\n      }\n    : never\n  : never\n\ntype ImmerImpl = <T>(\n  storeInitializer: StateCreator<T, [], []>,\n) => StateCreator<T, [], []>\n\nconst immerImpl: ImmerImpl = (initializer) => (set, get, store) => {\n  type T = ReturnType<typeof initializer>\n\n  store.setState = (updater, replace, ...a) => {\n    const nextState = (\n      typeof updater === 'function' ? produce(updater as any) : updater\n    ) as ((s: T) => T) | T | Partial<T>\n\n    return set(nextState as any, replace, ...a)\n  }\n\n  return initializer(store.setState, get, store)\n}\n\nexport const immer = immerImpl as unknown as Immer\n"],"names":[],"mappings":";;AAuDA,MAAM,YAAuB,CAAC,WAAA,KAAgB,CAAC,GAAA,EAAK,KAAK,KAAU,KAAA;AAGjE,EAAA,KAAA,CAAM,QAAW,GAAA,CAAC,OAAS,EAAA,OAAA,EAAA,GAAY,CAAM,KAAA;AAC3C,IAAA,MAAM,YACJ,OAAO,OAAA,KAAY,UAAa,GAAA,OAAA,CAAQ,OAAc,CAAI,GAAA,OAAA,CAAA;AAG5D,IAAA,OAAO,GAAI,CAAA,SAAA,EAAkB,OAAS,EAAA,GAAG,CAAC,CAAA,CAAA;AAAA,GAC5C,CAAA;AAEA,EAAA,OAAO,WAAY,CAAA,KAAA,CAAM,QAAU,EAAA,GAAA,EAAK,KAAK,CAAA,CAAA;AAC/C,CAAA,CAAA;AAEO,MAAM,KAAQ,GAAA;;;;"}