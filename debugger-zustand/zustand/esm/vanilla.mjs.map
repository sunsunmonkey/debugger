{"version":3,"file":"vanilla.mjs","sources":["../../src/vanilla.ts"],"sourcesContent":["type SetStateInternal<T> = {\n  _(\n    partial: T | Partial<T> | { _(state: T): T | Partial<T> }['_'],\n    replace?: boolean | undefined,\n  ): void\n}['_']\n\nexport interface StoreApi<T> {\n  setState: SetStateInternal<T>\n  getState: () => T\n  getInitialState: () => T\n  subscribe: (listener: (state: T, prevState: T) => void) => () => void\n  /**\n   * @deprecated Use `unsubscribe` returned by `subscribe`\n   */\n  destroy: () => void\n}\n\ntype Get<T, K, F> = K extends keyof T ? T[K] : F\n\nexport type Mutate<S, Ms> = number extends Ms['length' & keyof Ms]\n  ? S\n  : Ms extends []\n    ? S\n    : Ms extends [[infer Mi, infer Ma], ...infer Mrs]\n      ? Mutate<StoreMutators<S, Ma>[Mi & StoreMutatorIdentifier], Mrs>\n      : never\n\nexport type StateCreator<\n  T,\n  Mis extends [StoreMutatorIdentifier, unknown][] = [],\n  Mos extends [StoreMutatorIdentifier, unknown][] = [],\n  U = T,\n> = ((\n  setState: Get<Mutate<StoreApi<T>, Mis>, 'setState', never>,\n  getState: Get<Mutate<StoreApi<T>, Mis>, 'getState', never>,\n  store: Mutate<StoreApi<T>, Mis>,\n) => U) & { $$storeMutators?: Mos }\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-interface\nexport interface StoreMutators<S, A> {}\nexport type StoreMutatorIdentifier = keyof StoreMutators<unknown, unknown>\n\ntype CreateStore = {\n  <T, Mos extends [StoreMutatorIdentifier, unknown][] = []>(\n    initializer: StateCreator<T, [], Mos>,\n  ): Mutate<StoreApi<T>, Mos>\n\n  <T>(): <Mos extends [StoreMutatorIdentifier, unknown][] = []>(\n    initializer: StateCreator<T, [], Mos>,\n  ) => Mutate<StoreApi<T>, Mos>\n}\n\ntype CreateStoreImpl = <\n  T,\n  Mos extends [StoreMutatorIdentifier, unknown][] = [],\n>(\n  initializer: StateCreator<T, [], Mos>,\n) => Mutate<StoreApi<T>, Mos>\n\nconst createStoreImpl: CreateStoreImpl = (createState) => {\n  type TState = ReturnType<typeof createState>\n  type Listener = (state: TState, prevState: TState) => void\n  let state: TState\n  const listeners: Set<Listener> = new Set()\n\n  const setState: StoreApi<TState>['setState'] = (partial, replace) => {\n    // TODO: Remove type assertion once https://github.com/microsoft/TypeScript/issues/37663 is resolved\n    // https://github.com/microsoft/TypeScript/issues/37663#issuecomment-759728342\n    const nextState =\n      typeof partial === 'function'\n        ? (partial as (state: TState) => TState)(state)\n        : partial\n    if (!Object.is(nextState, state)) {\n      const previousState = state\n      state =\n        replace ?? (typeof nextState !== 'object' || nextState === null)\n          ? (nextState as TState)\n          : Object.assign({}, state, nextState)\n      listeners.forEach((listener) => listener(state, previousState))\n    }\n  }\n\n  const getState: StoreApi<TState>['getState'] = () => state\n\n  const getInitialState: StoreApi<TState>['getInitialState'] = () =>\n    initialState\n\n  const subscribe: StoreApi<TState>['subscribe'] = (listener) => {\n    listeners.add(listener)\n    // Unsubscribe\n    return () => listeners.delete(listener)\n  }\n\n  const destroy: StoreApi<TState>['destroy'] = () => {\n    if (import.meta.env?.MODE !== 'production') {\n      console.warn(\n        '[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.',\n      )\n    }\n    listeners.clear()\n  }\n\n  const api = { setState, getState, getInitialState, subscribe, destroy }\n  const initialState = (state = createState(setState, getState, api))\n  return api as any\n}\n\nexport const createStore = ((createState) =>\n  createState ? createStoreImpl(createState) : createStoreImpl) as CreateStore\n\n/**\n * @deprecated Use `import { createStore } from 'zustand/vanilla'`\n */\nexport default ((createState) => {\n  if (import.meta.env?.MODE !== 'production') {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\",\n    )\n  }\n  return createStore(createState)\n}) as CreateStore\n\n// ---------------------------------------------------------\n\n/**\n * @deprecated Use `unknown` instead of `State`\n */\nexport type State = unknown\n\n/**\n * @deprecated Use `Partial<T> | ((s: T) => Partial<T>)` instead of `PartialState<T>`\n */\nexport type PartialState<T extends State> =\n  | Partial<T>\n  | ((state: T) => Partial<T>)\n\n/**\n * @deprecated Use `(s: T) => U` instead of `StateSelector<T, U>`\n */\nexport type StateSelector<T extends State, U> = (state: T) => U\n\n/**\n * @deprecated Use `(a: T, b: T) => boolean` instead of `EqualityChecker<T>`\n */\nexport type EqualityChecker<T> = (state: T, newState: T) => boolean\n\n/**\n * @deprecated Use `(state: T, previousState: T) => void` instead of `StateListener<T>`\n */\nexport type StateListener<T> = (state: T, previousState: T) => void\n\n/**\n * @deprecated Use `(slice: T, previousSlice: T) => void` instead of `StateSliceListener<T>`.\n */\nexport type StateSliceListener<T> = (slice: T, previousSlice: T) => void\n\n/**\n * @deprecated Use `(listener: (state: T) => void) => void` instead of `Subscribe<T>`.\n */\nexport type Subscribe<T extends State> = {\n  (listener: (state: T, previousState: T) => void): () => void\n}\n\n/**\n * @deprecated You might be looking for `StateCreator`, if not then\n * use `StoreApi<T>['setState']` instead of `SetState<T>`.\n */\nexport type SetState<T extends State> = {\n  _(\n    partial: T | Partial<T> | { _(state: T): T | Partial<T> }['_'],\n    replace?: boolean | undefined,\n  ): void\n}['_']\n\n/**\n * @deprecated You might be looking for `StateCreator`, if not then\n * use `StoreApi<T>['getState']` instead of `GetState<T>`.\n */\nexport type GetState<T extends State> = () => T\n\n/**\n * @deprecated Use `StoreApi<T>['destroy']` instead of `Destroy`.\n */\nexport type Destroy = () => void\n"],"names":[],"mappings":"AA4DA,MAAM,eAAA,GAAmC,CAAC,WAAgB,KAAA;AAGxD,EAAI,IAAA,KAAA,CAAA;AACJ,EAAM,MAAA,SAAA,uBAA+B,GAAI,EAAA,CAAA;AAEzC,EAAM,MAAA,QAAA,GAAyC,CAAC,OAAA,EAAS,OAAY,KAAA;AAGnE,IAAA,MAAM,YACJ,OAAO,OAAA,KAAY,UACd,GAAA,OAAA,CAAsC,KAAK,CAC5C,GAAA,OAAA,CAAA;AACN,IAAA,IAAI,CAAC,MAAA,CAAO,EAAG,CAAA,SAAA,EAAW,KAAK,CAAG,EAAA;AAChC,MAAA,MAAM,aAAgB,GAAA,KAAA,CAAA;AACtB,MAAA,KAAA,GAAA,CACE,OAAY,IAAA,IAAA,GAAA,OAAA,GAAA,OAAO,SAAc,KAAA,QAAA,IAAY,SAAc,KAAA,IAAA,IACtD,SACD,GAAA,MAAA,CAAO,MAAO,CAAA,EAAI,EAAA,KAAA,EAAO,SAAS,CAAA,CAAA;AACxC,MAAA,SAAA,CAAU,QAAQ,CAAC,QAAA,KAAa,QAAS,CAAA,KAAA,EAAO,aAAa,CAAC,CAAA,CAAA;AAAA,KAChE;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,WAAyC,MAAM,KAAA,CAAA;AAErD,EAAA,MAAM,kBAAuD,MAC3D,YAAA,CAAA;AAEF,EAAM,MAAA,SAAA,GAA2C,CAAC,QAAa,KAAA;AAC7D,IAAA,SAAA,CAAU,IAAI,QAAQ,CAAA,CAAA;AAEtB,IAAO,OAAA,MAAM,SAAU,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAAA,GACxC,CAAA;AAEA,EAAA,MAAM,UAAuC,MAAM;AACjD,IAAA,IAAA,CAAyB,YAAA,GAAA,GAAA,MAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,GAAA,YAAK,YAAc,EAAA;AAC1C,MAAQ,OAAA,CAAA,IAAA;AAAA,QACN,wMAAA;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAA,SAAA,CAAU,KAAM,EAAA,CAAA;AAAA,GAClB,CAAA;AAEA,EAAA,MAAM,MAAM,EAAE,QAAA,EAAU,QAAU,EAAA,eAAA,EAAiB,WAAW,OAAQ,EAAA,CAAA;AACtE,EAAA,MAAM,YAAgB,GAAA,KAAA,GAAQ,WAAY,CAAA,QAAA,EAAU,UAAU,GAAG,CAAA,CAAA;AACjE,EAAO,OAAA,GAAA,CAAA;AACT,CAAA,CAAA;AAEO,MAAM,cAAe,CAAC,WAAA,KAC3B,WAAc,GAAA,eAAA,CAAgB,WAAW,CAAI,GAAA,gBAAA;AAK/C,cAAgB,CAAC,WAAgB,KAAA;AAC/B,EAAA,IAAA,sDAA8B,YAAc,EAAA;AAC1C,IAAQ,OAAA,CAAA,IAAA;AAAA,MACN,uGAAA;AAAA,KACF,CAAA;AAAA,GACF;AACA,EAAA,OAAO,YAAY,WAAW,CAAA,CAAA;AAChC,CAAA;;;;"}