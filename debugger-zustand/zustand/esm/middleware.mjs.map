{"version":3,"file":"middleware.mjs","sources":["../../src/middleware/redux.ts","../../src/middleware/devtools.ts","../../src/middleware/subscribeWithSelector.ts","../../src/middleware/combine.ts","../../src/middleware/persist.ts"],"sourcesContent":["import type { StateCreator, StoreMutatorIdentifier } from '../vanilla.ts'\nimport type { NamedSet } from './devtools.ts'\n\ntype Write<T, U> = Omit<T, keyof U> & U\n\ntype Action = { type: string }\n\ntype StoreRedux<A> = {\n  dispatch: (a: A) => A\n  dispatchFromDevtools: true\n}\n\ntype ReduxState<A> = {\n  dispatch: StoreRedux<A>['dispatch']\n}\n\ntype WithRedux<S, A> = Write<S, StoreRedux<A>>\n\ntype Redux = <\n  T,\n  A extends Action,\n  Cms extends [StoreMutatorIdentifier, unknown][] = [],\n>(\n  reducer: (state: T, action: A) => T,\n  initialState: T,\n) => StateCreator<Write<T, ReduxState<A>>, Cms, [['zustand/redux', A]]>\n\ndeclare module '../vanilla' {\n  interface StoreMutators<S, A> {\n    'zustand/redux': WithRedux<S, A>\n  }\n}\n\ntype ReduxImpl = <T, A extends Action>(\n  reducer: (state: T, action: A) => T,\n  initialState: T,\n) => StateCreator<T & ReduxState<A>, [], []>\n\nconst reduxImpl: ReduxImpl = (reducer, initial) => (set, _get, api) => {\n  type S = typeof initial\n  type A = Parameters<typeof reducer>[1]\n  ;(api as any).dispatch = (action: A) => {\n    ;(set as NamedSet<S>)((state: S) => reducer(state, action), false, action)\n    return action\n  }\n  ;(api as any).dispatchFromDevtools = true\n\n  return { dispatch: (...a) => (api as any).dispatch(...a), ...initial }\n}\nexport const redux = reduxImpl as unknown as Redux\n","import type {} from '@redux-devtools/extension'\nimport type {\n  StateCreator,\n  StoreApi,\n  StoreMutatorIdentifier,\n} from '../vanilla.ts'\n\ntype Config = Parameters<\n  (Window extends { __REDUX_DEVTOOLS_EXTENSION__?: infer T }\n    ? T\n    : { connect: (param: any) => any })['connect']\n>[0]\n\ndeclare module '../vanilla' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface StoreMutators<S, A> {\n    'zustand/devtools': WithDevtools<S>\n  }\n}\n\n// FIXME https://github.com/reduxjs/redux-devtools/issues/1097\ntype Message = {\n  type: string\n  payload?: any\n  state?: any\n}\n\ntype Cast<T, U> = T extends U ? T : U\ntype Write<T, U> = Omit<T, keyof U> & U\ntype TakeTwo<T> = T extends { length: 0 }\n  ? [undefined, undefined]\n  : T extends { length: 1 }\n    ? [...a0: Cast<T, unknown[]>, a1: undefined]\n    : T extends { length: 0 | 1 }\n      ? [...a0: Cast<T, unknown[]>, a1: undefined]\n      : T extends { length: 2 }\n        ? T\n        : T extends { length: 1 | 2 }\n          ? T\n          : T extends { length: 0 | 1 | 2 }\n            ? T\n            : T extends [infer A0, infer A1, ...unknown[]]\n              ? [A0, A1]\n              : T extends [infer A0, (infer A1)?, ...unknown[]]\n                ? [A0, A1?]\n                : T extends [(infer A0)?, (infer A1)?, ...unknown[]]\n                  ? [A0?, A1?]\n                  : never\n\ntype WithDevtools<S> = Write<S, StoreDevtools<S>>\n\ntype StoreDevtools<S> = S extends {\n  setState: (...a: infer Sa) => infer Sr\n}\n  ? {\n      setState<A extends string | { type: string }>(\n        ...a: [...a: TakeTwo<Sa>, action?: A]\n      ): Sr\n    }\n  : never\n\nexport interface DevtoolsOptions extends Config {\n  name?: string\n  enabled?: boolean\n  anonymousActionType?: string\n  store?: string\n}\n\ntype Devtools = <\n  T,\n  Mps extends [StoreMutatorIdentifier, unknown][] = [],\n  Mcs extends [StoreMutatorIdentifier, unknown][] = [],\n>(\n  initializer: StateCreator<T, [...Mps, ['zustand/devtools', never]], Mcs>,\n  devtoolsOptions?: DevtoolsOptions,\n) => StateCreator<T, Mps, [['zustand/devtools', never], ...Mcs]>\n\ndeclare module '../vanilla' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface StoreMutators<S, A> {\n    'zustand/devtools': WithDevtools<S>\n  }\n}\n\ntype DevtoolsImpl = <T>(\n  storeInitializer: StateCreator<T, [], []>,\n  devtoolsOptions?: DevtoolsOptions,\n) => StateCreator<T, [], []>\n\nexport type NamedSet<T> = WithDevtools<StoreApi<T>>['setState']\n\ntype Connection = ReturnType<\n  NonNullable<Window['__REDUX_DEVTOOLS_EXTENSION__']>['connect']\n>\ntype ConnectionName = string | undefined\ntype StoreName = string\ntype StoreInformation = StoreApi<unknown>\ntype ConnectionInformation = {\n  connection: Connection\n  stores: Record<StoreName, StoreInformation>\n}\nconst trackedConnections: Map<ConnectionName, ConnectionInformation> = new Map()\n\nconst getTrackedConnectionState = (\n  name: string | undefined,\n): Record<string, any> => {\n  const api = trackedConnections.get(name)\n  if (!api) return {}\n  return Object.fromEntries(\n    Object.entries(api.stores).map(([key, api]) => [key, api.getState()]),\n  )\n}\n\nconst extractConnectionInformation = (\n  store: string | undefined,\n  extensionConnector: NonNullable<\n    (typeof window)['__REDUX_DEVTOOLS_EXTENSION__']\n  >,\n  options: Omit<DevtoolsOptions, 'enabled' | 'anonymousActionType' | 'store'>,\n) => {\n  if (store === undefined) {\n    return {\n      type: 'untracked' as const,\n      connection: extensionConnector.connect(options),\n    }\n  }\n  const existingConnection = trackedConnections.get(options.name)\n  if (existingConnection) {\n    return { type: 'tracked' as const, store, ...existingConnection }\n  }\n  const newConnection: ConnectionInformation = {\n    connection: extensionConnector.connect(options),\n    stores: {},\n  }\n  trackedConnections.set(options.name, newConnection)\n  return { type: 'tracked' as const, store, ...newConnection }\n}\n\nconst devtoolsImpl: DevtoolsImpl =\n  (fn, devtoolsOptions = {}) =>\n  (set, get, api) => {\n    const { enabled, anonymousActionType, store, ...options } = devtoolsOptions\n\n    type S = ReturnType<typeof fn> & {\n      [store: string]: ReturnType<typeof fn>\n    }\n    type PartialState = Partial<S> | ((s: S) => Partial<S>)\n\n    let extensionConnector:\n      | (typeof window)['__REDUX_DEVTOOLS_EXTENSION__']\n      | false\n    try {\n      extensionConnector =\n        (enabled ?? import.meta.env?.MODE !== 'production') &&\n        window.__REDUX_DEVTOOLS_EXTENSION__\n    } catch (e) {\n      // ignored\n    }\n\n    if (!extensionConnector) {\n      if (import.meta.env?.MODE !== 'production' && enabled) {\n        console.warn(\n          '[zustand devtools middleware] Please install/enable Redux devtools extension',\n        )\n      }\n      return fn(set, get, api)\n    }\n\n    const { connection, ...connectionInformation } =\n      extractConnectionInformation(store, extensionConnector, options)\n\n    let isRecording = true\n    ;(api.setState as NamedSet<S>) = (state, replace, nameOrAction) => {\n      const r = set(state, replace)\n      if (!isRecording) return r\n      const action: { type: string } =\n        nameOrAction === undefined\n          ? { type: anonymousActionType || 'anonymous' }\n          : typeof nameOrAction === 'string'\n            ? { type: nameOrAction }\n            : nameOrAction\n      if (store === undefined) {\n        connection?.send(action, get())\n        return r\n      }\n      connection?.send(\n        {\n          ...action,\n          type: `${store}/${action.type}`,\n        },\n        {\n          ...getTrackedConnectionState(options.name),\n          [store]: api.getState(),\n        },\n      )\n      return r\n    }\n\n    const setStateFromDevtools: StoreApi<S>['setState'] = (...a) => {\n      const originalIsRecording = isRecording\n      isRecording = false\n      set(...a)\n      isRecording = originalIsRecording\n    }\n\n    const initialState = fn(api.setState, get, api)\n    if (connectionInformation.type === 'untracked') {\n      connection?.init(initialState)\n    } else {\n      connectionInformation.stores[connectionInformation.store] = api\n      connection?.init(\n        Object.fromEntries(\n          Object.entries(connectionInformation.stores).map(([key, store]) => [\n            key,\n            key === connectionInformation.store\n              ? initialState\n              : store.getState(),\n          ]),\n        ),\n      )\n    }\n\n    if (\n      (api as any).dispatchFromDevtools &&\n      typeof (api as any).dispatch === 'function'\n    ) {\n      let didWarnAboutReservedActionType = false\n      const originalDispatch = (api as any).dispatch\n      ;(api as any).dispatch = (...a: any[]) => {\n        if (\n          import.meta.env?.MODE !== 'production' &&\n          a[0].type === '__setState' &&\n          !didWarnAboutReservedActionType\n        ) {\n          console.warn(\n            '[zustand devtools middleware] \"__setState\" action type is reserved ' +\n              'to set state from the devtools. Avoid using it.',\n          )\n          didWarnAboutReservedActionType = true\n        }\n        ;(originalDispatch as any)(...a)\n      }\n    }\n\n    ;(\n      connection as unknown as {\n        // FIXME https://github.com/reduxjs/redux-devtools/issues/1097\n        subscribe: (\n          listener: (message: Message) => void,\n        ) => (() => void) | undefined\n      }\n    ).subscribe((message: any) => {\n      switch (message.type) {\n        case 'ACTION':\n          if (typeof message.payload !== 'string') {\n            console.error(\n              '[zustand devtools middleware] Unsupported action format',\n            )\n            return\n          }\n          return parseJsonThen<{ type: unknown; state?: PartialState }>(\n            message.payload,\n            (action) => {\n              if (action.type === '__setState') {\n                if (store === undefined) {\n                  setStateFromDevtools(action.state as PartialState)\n                  return\n                }\n                if (Object.keys(action.state as S).length !== 1) {\n                  console.error(\n                    `\n                    [zustand devtools middleware] Unsupported __setState action format. \n                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),\n                    and value of this only key should be a state object. Example: { \"type\": \"__setState\", \"state\": { \"abc123Store\": { \"foo\": \"bar\" } } }\n                    `,\n                  )\n                }\n                const stateFromDevtools = (action.state as S)[store]\n                if (\n                  stateFromDevtools === undefined ||\n                  stateFromDevtools === null\n                ) {\n                  return\n                }\n                if (\n                  JSON.stringify(api.getState()) !==\n                  JSON.stringify(stateFromDevtools)\n                ) {\n                  setStateFromDevtools(stateFromDevtools)\n                }\n                return\n              }\n\n              if (!(api as any).dispatchFromDevtools) return\n              if (typeof (api as any).dispatch !== 'function') return\n              ;(api as any).dispatch(action)\n            },\n          )\n\n        case 'DISPATCH':\n          switch (message.payload.type) {\n            case 'RESET':\n              setStateFromDevtools(initialState as S)\n              if (store === undefined) {\n                return connection?.init(api.getState())\n              }\n              return connection?.init(getTrackedConnectionState(options.name))\n\n            case 'COMMIT':\n              if (store === undefined) {\n                connection?.init(api.getState())\n                return\n              }\n              return connection?.init(getTrackedConnectionState(options.name))\n\n            case 'ROLLBACK':\n              return parseJsonThen<S>(message.state, (state) => {\n                if (store === undefined) {\n                  setStateFromDevtools(state)\n                  connection?.init(api.getState())\n                  return\n                }\n                setStateFromDevtools(state[store] as S)\n                connection?.init(getTrackedConnectionState(options.name))\n              })\n\n            case 'JUMP_TO_STATE':\n            case 'JUMP_TO_ACTION':\n              return parseJsonThen<S>(message.state, (state) => {\n                if (store === undefined) {\n                  setStateFromDevtools(state)\n                  return\n                }\n                if (\n                  JSON.stringify(api.getState()) !==\n                  JSON.stringify(state[store])\n                ) {\n                  setStateFromDevtools(state[store] as S)\n                }\n              })\n\n            case 'IMPORT_STATE': {\n              const { nextLiftedState } = message.payload\n              const lastComputedState =\n                nextLiftedState.computedStates.slice(-1)[0]?.state\n              if (!lastComputedState) return\n              if (store === undefined) {\n                setStateFromDevtools(lastComputedState)\n              } else {\n                setStateFromDevtools(lastComputedState[store])\n              }\n              connection?.send(\n                null as any, // FIXME no-any\n                nextLiftedState,\n              )\n              return\n            }\n\n            case 'PAUSE_RECORDING':\n              return (isRecording = !isRecording)\n          }\n          return\n      }\n    })\n\n    return initialState\n  }\nexport const devtools = devtoolsImpl as unknown as Devtools\n\nconst parseJsonThen = <T>(stringified: string, f: (parsed: T) => void) => {\n  let parsed: T | undefined\n  try {\n    parsed = JSON.parse(stringified)\n  } catch (e) {\n    console.error(\n      '[zustand devtools middleware] Could not parse the received json',\n      e,\n    )\n  }\n  if (parsed !== undefined) f(parsed as T)\n}\n","import type { StateCreator, StoreMutatorIdentifier } from '../vanilla.ts'\n\ntype SubscribeWithSelector = <\n  T,\n  Mps extends [StoreMutatorIdentifier, unknown][] = [],\n  Mcs extends [StoreMutatorIdentifier, unknown][] = [],\n>(\n  initializer: StateCreator<\n    T,\n    [...Mps, ['zustand/subscribeWithSelector', never]],\n    Mcs\n  >,\n) => StateCreator<T, Mps, [['zustand/subscribeWithSelector', never], ...Mcs]>\n\ntype Write<T, U> = Omit<T, keyof U> & U\n\ntype WithSelectorSubscribe<S> = S extends { getState: () => infer T }\n  ? Write<S, StoreSubscribeWithSelector<T>>\n  : never\n\ndeclare module '../vanilla' {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface StoreMutators<S, A> {\n    ['zustand/subscribeWithSelector']: WithSelectorSubscribe<S>\n  }\n}\n\ntype StoreSubscribeWithSelector<T> = {\n  subscribe: {\n    (listener: (selectedState: T, previousSelectedState: T) => void): () => void\n    <U>(\n      selector: (state: T) => U,\n      listener: (selectedState: U, previousSelectedState: U) => void,\n      options?: {\n        equalityFn?: (a: U, b: U) => boolean\n        fireImmediately?: boolean\n      },\n    ): () => void\n  }\n}\n\ntype SubscribeWithSelectorImpl = <T extends object>(\n  storeInitializer: StateCreator<T, [], []>,\n) => StateCreator<T, [], []>\n\nconst subscribeWithSelectorImpl: SubscribeWithSelectorImpl =\n  (fn) => (set, get, api) => {\n    type S = ReturnType<typeof fn>\n    type Listener = (state: S, previousState: S) => void\n    const origSubscribe = api.subscribe as (listener: Listener) => () => void\n    api.subscribe = ((selector: any, optListener: any, options: any) => {\n      let listener: Listener = selector // if no selector\n      if (optListener) {\n        const equalityFn = options?.equalityFn || Object.is\n        let currentSlice = selector(api.getState())\n        listener = (state) => {\n          const nextSlice = selector(state)\n          if (!equalityFn(currentSlice, nextSlice)) {\n            const previousSlice = currentSlice\n            optListener((currentSlice = nextSlice), previousSlice)\n          }\n        }\n        if (options?.fireImmediately) {\n          optListener(currentSlice, currentSlice)\n        }\n      }\n      return origSubscribe(listener)\n    }) as any\n    const initialState = fn(set, get, api)\n    return initialState\n  }\nexport const subscribeWithSelector =\n  subscribeWithSelectorImpl as unknown as SubscribeWithSelector\n","import type { StateCreator, StoreMutatorIdentifier } from '../vanilla.ts'\n\ntype Write<T, U> = Omit<T, keyof U> & U\n\ntype Combine = <\n  T extends object,\n  U extends object,\n  Mps extends [StoreMutatorIdentifier, unknown][] = [],\n  Mcs extends [StoreMutatorIdentifier, unknown][] = [],\n>(\n  initialState: T,\n  additionalStateCreator: StateCreator<T, Mps, Mcs, U>,\n) => StateCreator<Write<T, U>, Mps, Mcs>\n\nexport const combine: Combine =\n  (initialState, create) =>\n  (...a) =>\n    Object.assign({}, initialState, (create as any)(...a))\n","import type {\n  StateCreator,\n  StoreApi,\n  StoreMutatorIdentifier,\n} from '../vanilla.ts'\n\nexport interface StateStorage {\n  getItem: (name: string) => string | null | Promise<string | null>\n  setItem: (name: string, value: string) => void | Promise<void>\n  removeItem: (name: string) => void | Promise<void>\n}\n\nexport type StorageValue<S> = {\n  state: S\n  version?: number\n}\n\nexport interface PersistStorage<S> {\n  getItem: (\n    name: string,\n  ) => StorageValue<S> | null | Promise<StorageValue<S> | null>\n  setItem: (name: string, value: StorageValue<S>) => void | Promise<void>\n  removeItem: (name: string) => void | Promise<void>\n}\n\ntype JsonStorageOptions = {\n  reviver?: (key: string, value: unknown) => unknown\n  replacer?: (key: string, value: unknown) => unknown\n}\n\nexport function createJSONStorage<S>(\n  getStorage: () => StateStorage,\n  options?: JsonStorageOptions,\n): PersistStorage<S> | undefined {\n  let storage: StateStorage | undefined\n  try {\n    storage = getStorage()\n  } catch (e) {\n    // prevent error if the storage is not defined (e.g. when server side rendering a page)\n    return\n  }\n  const persistStorage: PersistStorage<S> = {\n    getItem: (name) => {\n      const parse = (str: string | null) => {\n        if (str === null) {\n          return null\n        }\n        return JSON.parse(str, options?.reviver) as StorageValue<S>\n      }\n      const str = (storage as StateStorage).getItem(name) ?? null\n      if (str instanceof Promise) {\n        return str.then(parse)\n      }\n      return parse(str)\n    },\n    setItem: (name, newValue) =>\n      (storage as StateStorage).setItem(\n        name,\n        JSON.stringify(newValue, options?.replacer),\n      ),\n    removeItem: (name) => (storage as StateStorage).removeItem(name),\n  }\n  return persistStorage\n}\n\nexport interface PersistOptions<S, PersistedState = S> {\n  /** Name of the storage (must be unique) */\n  name: string\n  /**\n   * @deprecated Use `storage` instead.\n   * A function returning a storage.\n   * The storage must fit `window.localStorage`'s api (or an async version of it).\n   * For example the storage could be `AsyncStorage` from React Native.\n   *\n   * @default () => localStorage\n   */\n  getStorage?: () => StateStorage\n  /**\n   * @deprecated Use `storage` instead.\n   * Use a custom serializer.\n   * The returned string will be stored in the storage.\n   *\n   * @default JSON.stringify\n   */\n  serialize?: (state: StorageValue<S>) => string | Promise<string>\n  /**\n   * @deprecated Use `storage` instead.\n   * Use a custom deserializer.\n   * Must return an object matching StorageValue<S>\n   *\n   * @param str The storage's current value.\n   * @default JSON.parse\n   */\n  deserialize?: (\n    str: string,\n  ) => StorageValue<PersistedState> | Promise<StorageValue<PersistedState>>\n  /**\n   * Use a custom persist storage.\n   *\n   * Combining `createJSONStorage` helps creating a persist storage\n   * with JSON.parse and JSON.stringify.\n   *\n   * @default createJSONStorage(() => localStorage)\n   */\n  storage?: PersistStorage<PersistedState> | undefined\n  /**\n   * Filter the persisted value.\n   *\n   * @params state The state's value\n   */\n  partialize?: (state: S) => PersistedState\n  /**\n   * A function returning another (optional) function.\n   * The main function will be called before the state rehydration.\n   * The returned function will be called after the state rehydration or when an error occurred.\n   */\n  onRehydrateStorage?: (\n    state: S,\n  ) => ((state?: S, error?: unknown) => void) | void\n  /**\n   * If the stored state's version mismatch the one specified here, the storage will not be used.\n   * This is useful when adding a breaking change to your store.\n   */\n  version?: number\n  /**\n   * A function to perform persisted state migration.\n   * This function will be called when persisted state versions mismatch with the one specified here.\n   */\n  migrate?: (persistedState: unknown, version: number) => S | Promise<S>\n  /**\n   * A function to perform custom hydration merges when combining the stored state with the current one.\n   * By default, this function does a shallow merge.\n   */\n  merge?: (persistedState: unknown, currentState: S) => S\n\n  /**\n   * An optional boolean that will prevent the persist middleware from triggering hydration on initialization,\n   * This allows you to call `rehydrate()` at a specific point in your apps rendering life-cycle.\n   *\n   * This is useful in SSR application.\n   *\n   * @default false\n   */\n  skipHydration?: boolean\n}\n\ntype PersistListener<S> = (state: S) => void\n\ntype StorePersist<S, Ps> = {\n  persist: {\n    setOptions: (options: Partial<PersistOptions<S, Ps>>) => void\n    clearStorage: () => void\n    rehydrate: () => Promise<void> | void\n    hasHydrated: () => boolean\n    onHydrate: (fn: PersistListener<S>) => () => void\n    onFinishHydration: (fn: PersistListener<S>) => () => void\n    getOptions: () => Partial<PersistOptions<S, Ps>>\n  }\n}\n\ntype Thenable<Value> = {\n  then<V>(\n    onFulfilled: (value: Value) => V | Promise<V> | Thenable<V>,\n  ): Thenable<V>\n  catch<V>(\n    onRejected: (reason: Error) => V | Promise<V> | Thenable<V>,\n  ): Thenable<V>\n}\n\nconst toThenable =\n  <Result, Input>(\n    fn: (input: Input) => Result | Promise<Result> | Thenable<Result>,\n  ) =>\n  (input: Input): Thenable<Result> => {\n    try {\n      const result = fn(input)\n      if (result instanceof Promise) {\n        return result as Thenable<Result>\n      }\n      return {\n        then(onFulfilled) {\n          return toThenable(onFulfilled)(result as Result)\n        },\n        catch(_onRejected) {\n          return this as Thenable<any>\n        },\n      }\n    } catch (e: any) {\n      return {\n        then(_onFulfilled) {\n          return this as Thenable<any>\n        },\n        catch(onRejected) {\n          return toThenable(onRejected)(e)\n        },\n      }\n    }\n  }\n\nconst oldImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {\n  type S = ReturnType<typeof config>\n  let options = {\n    getStorage: () => localStorage,\n    serialize: JSON.stringify as (state: StorageValue<S>) => string,\n    deserialize: JSON.parse as (str: string) => StorageValue<S>,\n    partialize: (state: S) => state,\n    version: 0,\n    merge: (persistedState: unknown, currentState: S) => ({\n      ...currentState,\n      ...(persistedState as object),\n    }),\n    ...baseOptions,\n  }\n\n  let hasHydrated = false\n  const hydrationListeners = new Set<PersistListener<S>>()\n  const finishHydrationListeners = new Set<PersistListener<S>>()\n  let storage: StateStorage | undefined\n\n  try {\n    storage = options.getStorage()\n  } catch (e) {\n    // prevent error if the storage is not defined (e.g. when server side rendering a page)\n  }\n\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,\n        )\n        set(...args)\n      },\n      get,\n      api,\n    )\n  }\n\n  const thenableSerialize = toThenable(options.serialize)\n\n  const setItem = (): Thenable<void> => {\n    const state = options.partialize({ ...get() })\n\n    let errorInSync: Error | undefined\n    const thenable = thenableSerialize({ state, version: options.version })\n      .then((serializedValue) =>\n        (storage as StateStorage).setItem(options.name, serializedValue),\n      )\n      .catch((e) => {\n        errorInSync = e\n      })\n    if (errorInSync) {\n      throw errorInSync\n    }\n    return thenable\n  }\n\n  const savedSetState = api.setState\n\n  api.setState = (state, replace) => {\n    savedSetState(state, replace)\n    void setItem()\n  }\n\n  const configResult = config(\n    (...args) => {\n      set(...args)\n      void setItem()\n    },\n    get,\n    api,\n  )\n\n  // a workaround to solve the issue of not storing rehydrated state in sync storage\n  // the set(state) value would be later overridden with initial state by create()\n  // to avoid this, we merge the state from localStorage into the initial state.\n  let stateFromStorage: S | undefined\n\n  // rehydrate initial state with existing stored state\n  const hydrate = () => {\n    if (!storage) return\n\n    hasHydrated = false\n    hydrationListeners.forEach((cb) => cb(get()))\n\n    const postRehydrationCallback =\n      options.onRehydrateStorage?.(get()) || undefined\n\n    // bind is used to avoid `TypeError: Illegal invocation` error\n    return toThenable(storage.getItem.bind(storage))(options.name)\n      .then((storageValue) => {\n        if (storageValue) {\n          return options.deserialize(storageValue)\n        }\n      })\n      .then((deserializedStorageValue) => {\n        if (deserializedStorageValue) {\n          if (\n            typeof deserializedStorageValue.version === 'number' &&\n            deserializedStorageValue.version !== options.version\n          ) {\n            if (options.migrate) {\n              return options.migrate(\n                deserializedStorageValue.state,\n                deserializedStorageValue.version,\n              )\n            }\n            console.error(\n              `State loaded from storage couldn't be migrated since no migrate function was provided`,\n            )\n          } else {\n            return deserializedStorageValue.state\n          }\n        }\n      })\n      .then((migratedState) => {\n        stateFromStorage = options.merge(\n          migratedState as S,\n          get() ?? configResult,\n        )\n\n        set(stateFromStorage as S, true)\n        return setItem()\n      })\n      .then(() => {\n        postRehydrationCallback?.(stateFromStorage, undefined)\n        hasHydrated = true\n        finishHydrationListeners.forEach((cb) => cb(stateFromStorage as S))\n      })\n      .catch((e: Error) => {\n        postRehydrationCallback?.(undefined, e)\n      })\n  }\n\n  ;(api as StoreApi<S> & StorePersist<S, S>).persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions,\n      }\n\n      if (newOptions.getStorage) {\n        storage = newOptions.getStorage()\n      }\n    },\n    clearStorage: () => {\n      storage?.removeItem(options.name)\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate() as Promise<void>,\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb)\n\n      return () => {\n        hydrationListeners.delete(cb)\n      }\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb)\n\n      return () => {\n        finishHydrationListeners.delete(cb)\n      }\n    },\n  }\n\n  hydrate()\n\n  return stateFromStorage || configResult\n}\n\nconst newImpl: PersistImpl = (config, baseOptions) => (set, get, api) => {\n  type S = ReturnType<typeof config>\n  let options = {\n    storage: createJSONStorage<S>(() => localStorage),\n    partialize: (state: S) => state,\n    version: 0,\n    merge: (persistedState: unknown, currentState: S) => ({\n      ...currentState,\n      ...(persistedState as object),\n    }),\n    ...baseOptions,\n  }\n\n  let hasHydrated = false\n  const hydrationListeners = new Set<PersistListener<S>>()\n  const finishHydrationListeners = new Set<PersistListener<S>>()\n  let storage = options.storage\n\n  if (!storage) {\n    return config(\n      (...args) => {\n        console.warn(\n          `[zustand persist middleware] Unable to update item '${options.name}', the given storage is currently unavailable.`,\n        )\n        set(...args)\n      },\n      get,\n      api,\n    )\n  }\n\n  const setItem = (): void | Promise<void> => {\n    const state = options.partialize({ ...get() })\n    return (storage as PersistStorage<S>).setItem(options.name, {\n      state,\n      version: options.version,\n    })\n  }\n\n  const savedSetState = api.setState\n\n  api.setState = (state, replace) => {\n    savedSetState(state, replace)\n    void setItem()\n  }\n\n  const configResult = config(\n    (...args) => {\n      set(...args)\n      void setItem()\n    },\n    get,\n    api,\n  )\n\n  api.getInitialState = () => configResult\n\n  // a workaround to solve the issue of not storing rehydrated state in sync storage\n  // the set(state) value would be later overridden with initial state by create()\n  // to avoid this, we merge the state from localStorage into the initial state.\n  let stateFromStorage: S | undefined\n\n  // rehydrate initial state with existing stored state\n  const hydrate = () => {\n    if (!storage) return\n\n    // On the first invocation of 'hydrate', state will not yet be defined (this is\n    // true for both the 'asynchronous' and 'synchronous' case). Pass 'configResult'\n    // as a backup  to 'get()' so listeners and 'onRehydrateStorage' are called with\n    // the latest available state.\n\n    hasHydrated = false\n    hydrationListeners.forEach((cb) => cb(get() ?? configResult))\n\n    const postRehydrationCallback =\n      options.onRehydrateStorage?.(get() ?? configResult) || undefined\n\n    // bind is used to avoid `TypeError: Illegal invocation` error\n    return toThenable(storage.getItem.bind(storage))(options.name)\n      .then((deserializedStorageValue) => {\n        if (deserializedStorageValue) {\n          if (\n            typeof deserializedStorageValue.version === 'number' &&\n            deserializedStorageValue.version !== options.version\n          ) {\n            if (options.migrate) {\n              return options.migrate(\n                deserializedStorageValue.state,\n                deserializedStorageValue.version,\n              )\n            }\n            console.error(\n              `State loaded from storage couldn't be migrated since no migrate function was provided`,\n            )\n          } else {\n            return deserializedStorageValue.state\n          }\n        }\n      })\n      .then((migratedState) => {\n        stateFromStorage = options.merge(\n          migratedState as S,\n          get() ?? configResult,\n        )\n\n        set(stateFromStorage as S, true)\n        return setItem()\n      })\n      .then(() => {\n        // TODO: In the asynchronous case, it's possible that the state has changed\n        // since it was set in the prior callback. As such, it would be better to\n        // pass 'get()' to the 'postRehydrationCallback' to ensure the most up-to-date\n        // state is used. However, this could be a breaking change, so this isn't being\n        // done now.\n        postRehydrationCallback?.(stateFromStorage, undefined)\n\n        // It's possible that 'postRehydrationCallback' updated the state. To ensure\n        // that isn't overwritten when returning 'stateFromStorage' below\n        // (synchronous-case only), update 'stateFromStorage' to point to the latest\n        // state. In the asynchronous case, 'stateFromStorage' isn't used after this\n        // callback, so there's no harm in updating it to match the latest state.\n        stateFromStorage = get()\n        hasHydrated = true\n        finishHydrationListeners.forEach((cb) => cb(stateFromStorage as S))\n      })\n      .catch((e: Error) => {\n        postRehydrationCallback?.(undefined, e)\n      })\n  }\n\n  ;(api as StoreApi<S> & StorePersist<S, S>).persist = {\n    setOptions: (newOptions) => {\n      options = {\n        ...options,\n        ...newOptions,\n      }\n\n      if (newOptions.storage) {\n        storage = newOptions.storage\n      }\n    },\n    clearStorage: () => {\n      storage?.removeItem(options.name)\n    },\n    getOptions: () => options,\n    rehydrate: () => hydrate() as Promise<void>,\n    hasHydrated: () => hasHydrated,\n    onHydrate: (cb) => {\n      hydrationListeners.add(cb)\n\n      return () => {\n        hydrationListeners.delete(cb)\n      }\n    },\n    onFinishHydration: (cb) => {\n      finishHydrationListeners.add(cb)\n\n      return () => {\n        finishHydrationListeners.delete(cb)\n      }\n    },\n  }\n\n  if (!options.skipHydration) {\n    hydrate()\n  }\n\n  return stateFromStorage || configResult\n}\n\nconst persistImpl: PersistImpl = (config, baseOptions) => {\n  if (\n    'getStorage' in baseOptions ||\n    'serialize' in baseOptions ||\n    'deserialize' in baseOptions\n  ) {\n    if (import.meta.env?.MODE !== 'production') {\n      console.warn(\n        '[DEPRECATED] `getStorage`, `serialize` and `deserialize` options are deprecated. Use `storage` option instead.',\n      )\n    }\n    return oldImpl(config, baseOptions)\n  }\n  return newImpl(config, baseOptions)\n}\n\ntype Persist = <\n  T,\n  Mps extends [StoreMutatorIdentifier, unknown][] = [],\n  Mcs extends [StoreMutatorIdentifier, unknown][] = [],\n  U = T,\n>(\n  initializer: StateCreator<T, [...Mps, ['zustand/persist', unknown]], Mcs>,\n  options: PersistOptions<T, U>,\n) => StateCreator<T, Mps, [['zustand/persist', U], ...Mcs]>\n\ndeclare module '../vanilla' {\n  interface StoreMutators<S, A> {\n    'zustand/persist': WithPersist<S, A>\n  }\n}\n\ntype Write<T, U> = Omit<T, keyof U> & U\n\ntype WithPersist<S, A> = S extends { getState: () => infer T }\n  ? Write<S, StorePersist<T, A>>\n  : never\n\ntype PersistImpl = <T>(\n  storeInitializer: StateCreator<T, [], []>,\n  options: PersistOptions<T, T>,\n) => StateCreator<T, [], []>\n\nexport const persist = persistImpl as unknown as Persist\n"],"names":["api","store","str","_a"],"mappings":"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"}