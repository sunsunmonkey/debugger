{"version":3,"file":"context.js","sources":["../../src/context.ts"],"sourcesContent":["// import {\n//   createElement,\n//   createContext as reactCreateContext,\n//   useContext,\n//   useMemo,\n//   useRef,\n// } from 'react'\n// That doesnt work in ESM, because React libs are CJS only.\n// The following is a workaround until ESM is supported.\n// eslint-disable-next-line import/extensions\nimport ReactExports from 'react'\nimport type { ReactNode } from 'react'\nimport type { StoreApi } from 'zustand'\n// eslint-disable-next-line import/extensions\nimport { useStoreWithEqualityFn } from 'zustand/traditional'\n\nconst {\n  createElement,\n  createContext: reactCreateContext,\n  useContext,\n  useMemo,\n  useRef,\n} = ReactExports\n\ntype UseContextStore<S extends StoreApi<unknown>> = {\n  (): ExtractState<S>\n  <U>(\n    selector: (state: ExtractState<S>) => U,\n    equalityFn?: (a: U, b: U) => boolean,\n  ): U\n}\n\ntype ExtractState<S> = S extends { getState: () => infer T } ? T : never\n\ntype WithoutCallSignature<T> = { [K in keyof T]: T[K] }\n\n/**\n * @deprecated Use `createStore` and `useStore` for context usage\n */\nfunction createContext<S extends StoreApi<unknown>>() {\n  if (import.meta.env?.MODE !== 'production') {\n    console.warn(\n      \"[DEPRECATED] `context` will be removed in a future version. Instead use `import { createStore, useStore } from 'zustand'`. See: https://github.com/pmndrs/zustand/discussions/1180.\",\n    )\n  }\n  const ZustandContext = reactCreateContext<S | undefined>(undefined)\n\n  const Provider = ({\n    createStore,\n    children,\n  }: {\n    createStore: () => S\n    children: ReactNode\n  }) => {\n    const storeRef = useRef<S>()\n\n    if (!storeRef.current) {\n      storeRef.current = createStore()\n    }\n\n    return createElement(\n      ZustandContext.Provider,\n      { value: storeRef.current },\n      children,\n    )\n  }\n\n  const useContextStore: UseContextStore<S> = <StateSlice = ExtractState<S>>(\n    selector?: (state: ExtractState<S>) => StateSlice,\n    equalityFn?: (a: StateSlice, b: StateSlice) => boolean,\n  ) => {\n    const store = useContext(ZustandContext)\n    if (!store) {\n      throw new Error(\n        'Seems like you have not used zustand provider as an ancestor.',\n      )\n    }\n    return useStoreWithEqualityFn(\n      store,\n      selector as (state: ExtractState<S>) => StateSlice,\n      equalityFn,\n    )\n  }\n\n  const useStoreApi = () => {\n    const store = useContext(ZustandContext)\n    if (!store) {\n      throw new Error(\n        'Seems like you have not used zustand provider as an ancestor.',\n      )\n    }\n    return useMemo<WithoutCallSignature<S>>(() => ({ ...store }), [store])\n  }\n\n  return {\n    Provider,\n    useStore: useContextStore,\n    useStoreApi,\n  }\n}\n\nexport default createContext\n"],"names":[],"mappings":";;;AAgBA,MAAM;AAAA,EACJ,aAAA;AAAA,EACA,aAAe,EAAA,kBAAA;AAAA,EACf,UAAA;AAAA,EACA,OAAA;AAAA,EACA,MAAA;AACF,CAAI,GAAA,YAAA,CAAA;AAiBJ,SAAS,aAA6C,GAAA;AACpD,EAAI,IAAA,OAAA,kBAA0B,YAAc,EAAA;AAC1C,IAAQ,OAAA,CAAA,IAAA;AAAA,MACN,qLAAA;AAAA,KACF,CAAA;AAAA,GACF;AACA,EAAM,MAAA,cAAA,GAAiB,mBAAkC,KAAS,CAAA,CAAA,CAAA;AAElE,EAAA,MAAM,WAAW,CAAC;AAAA,IAChB,WAAA;AAAA,IACA,QAAA;AAAA,GAII,KAAA;AACJ,IAAA,MAAM,WAAW,MAAU,EAAA,CAAA;AAE3B,IAAI,IAAA,CAAC,SAAS,OAAS,EAAA;AACrB,MAAA,QAAA,CAAS,UAAU,WAAY,EAAA,CAAA;AAAA,KACjC;AAEA,IAAO,OAAA,aAAA;AAAA,MACL,cAAe,CAAA,QAAA;AAAA,MACf,EAAE,KAAO,EAAA,QAAA,CAAS,OAAQ,EAAA;AAAA,MAC1B,QAAA;AAAA,KACF,CAAA;AAAA,GACF,CAAA;AAEA,EAAM,MAAA,eAAA,GAAsC,CAC1C,QAAA,EACA,UACG,KAAA;AACH,IAAM,MAAA,KAAA,GAAQ,WAAW,cAAc,CAAA,CAAA;AACvC,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,+DAAA;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAO,OAAA,sBAAA;AAAA,MACL,KAAA;AAAA,MACA,QAAA;AAAA,MACA,UAAA;AAAA,KACF,CAAA;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,cAAc,MAAM;AACxB,IAAM,MAAA,KAAA,GAAQ,WAAW,cAAc,CAAA,CAAA;AACvC,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,+DAAA;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAO,OAAA,OAAA,CAAiC,OAAO,EAAE,GAAG,OAAU,CAAA,EAAA,CAAC,KAAK,CAAC,CAAA,CAAA;AAAA,GACvE,CAAA;AAEA,EAAO,OAAA;AAAA,IACL,QAAA;AAAA,IACA,QAAU,EAAA,eAAA;AAAA,IACV,WAAA;AAAA,GACF,CAAA;AACF;;;;"}